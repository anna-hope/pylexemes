#!/bin/sh
# Sound Changes v 0.01
# Anton Melnikov

import xml.etree.ElementTree as ET
import collections

lexemes = ET.parse("lexemes.xml")
root = lexemes.getroot()
numlexemes = len(root)

def main():
	langs = get_langs()
	forms = get_forms()
	langforms = []

	for n in range (numlexemes):
		langforms.append((langs[n], forms[n]))

	print (langforms)
	lengths = get_length(forms)
	groups = assemble_groups(forms, lengths[0], lengths[1])
	most_common_phonemes = get_most_common_phonemes(groups, lengths[0])

	reconstructed_form = reconstruct(most_common_phonemes)
	print (reconstructed_form)

# get all the languages from the database
def get_langs():
	langs = []
	for n in range (numlexemes):
		langs.append(root[n].find("lang").text)
	return langs

# get all the forms from the database
def get_forms():
	forms = []
	for n in range (numlexemes):
		forms.append(root[n].find("form").text)
	return forms

# let's get the shortest form and the longest form
def get_length(forms):
	minlength = 0
	maxlength = 0

	count = 0
	while count < numlexemes:
		if (minlength == 0 and maxlength == 0):
			minlength = len(forms[count])
			maxlength = len(forms[count])
		else:
			if minlength > len(forms[count]):
				minlength = len(forms[count])
			elif maxlength < len(forms[count]):
				maxlength = len(forms[count])
		count += 1

		return [minlength, maxlength]


# assemble the phoneme groups
def assemble_groups(forms, minlength, maxlength):
	
	phonemegroups = []

	
	# now let's get all the phonemes according to each group
	# THIS ALGORITHM WORKS ONLY FOR 1:1 MATCHES AT THE MOMENT
	# TODO: create an xml file with phoneme groupings (w,v,etc.) and make it assemble groups according to that file
	lettercount = 0
	while lettercount < maxlength:
		count = 0
		currentgroup = []
		while count < numlexemes:
			try:
				currentgroup.append(forms[count][lettercount])
			except IndexError:
				currentgroup.append(' ')
			count += 1
		phonemegroups.append(currentgroup)
		lettercount += 1

	# print (phonemegroups)
	return phonemegroups

# most common phonemes
def get_most_common_phonemes(phonemegroups, minlength):
	c = collections
	phoneme_frequency = 0
	most_common_phonemes = []

	for n in range (len(phonemegroups)):
		most_common_phonemes.append(c.Counter(phonemegroups[n]).most_common(1))
		# FIX: at the moment this ignores non-English characters


	print (most_common_phonemes)
	return most_common_phonemes

# reconstruct the form
# TODO: for now only works with most commonly occuring phonemes
def reconstruct(most_common_phonemes):
	reconstructed = []
	for n in range(len(most_common_phonemes)):
		reconstructed.append(most_common_phonemes[n][0][0])

	# print (reconstructed)

	return ''.join(reconstructed)

if __name__ == "__main__":
	main()